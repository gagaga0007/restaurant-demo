  const controlIconSize = 16

  const deleteObject = (_eventData: MouseEvent, transform: Transform) => {
    const target = transform.target;
    const canvas = target.canvas;
    canvas!.remove(target);
    canvas!.requestRenderAll();
  }

  const renderDeleteIcon = (ctx: CanvasRenderingContext2D, left: number, top: number, _styleOverride: never, fabricObject: fabric.Object) => {
    ctx.save();
    ctx.translate(left, top);
    ctx.rotate(fabric.util.degreesToRadians(fabricObject.angle!));
    ctx.drawImage(deleteIconElement.current!, -controlIconSize / 2, -controlIconSize / 2, controlIconSize, controlIconSize);
    ctx.restore();
  }

    // 增加控制栏 - 删除按钮 - 在初始化的 useEffect 中
    fabric.Object.prototype.controls.deleteControl = new fabric.Control({
      x: 0.5,
      y: -0.5,
      offsetX: -12,
      offsetY: 12,
      cursorStyle: 'pointer',
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-expect-error
      mouseUpHandler: deleteObject,
      render: renderDeleteIcon,
      cornerSize: controlIconSize
    });

    // 删除图标
    const deleteIconImg = new Image()
    deleteIconImg.src = deleteIcon
    deleteIconElement.current = deleteIconImg


--- layoutSelect.tsx ---
// 改变背景图
// const setBgImg = (base64: string) => {
//   // 盒子宽度
//   const innerWidth = innerElement.current!.getBoundingClientRect().width
//   // 通过 Image 对象获取图片宽高，并设置 canvas 宽高
//   const image = new Image()
//   image.src = base64
//   image.onload = () => {
//     const height = (image.height * innerWidth) / image.width
//     innerElement.current!.style.height = height + 'px'
//     canvasObj.current!.setHeight(height)
//
//     const borderWidth = 2
//     canvasElement.current!.height = height - borderWidth
//     canvasElement.current!.width = innerWidth - borderWidth
//
//     setBackgroundImage(base64)
//   }
// }
// 设置宽高
// const { width, height } = innerElement.current!.getBoundingClientRect()
// const canvasWidth = width - 2
// const canvasHeight = height - 2
// canvasElement.current!.width = canvasWidth
// canvasElement.current!.height = canvasHeight
// canvasElement.current!.style.width = canvasWidth + 'px'
// canvasElement.current!.style.height = canvasHeight + 'px'


--- layoutEdit.tsx ---
// 改变背景图
// const setBgImg = (base64: string) => {
//   // 盒子宽度
//   const innerWidth = innerElement.current!.getBoundingClientRect().width
//   // 通过 Image 对象获取图片宽高，并设置 canvas 宽高
//   const image = new Image()
//   image.src = base64
//   image.onload = () => {
//     const height = (image.height * innerWidth) / image.width
//     innerElement.current!.style.height = height + 'px'
//     canvasObj.current!.setHeight(height)
//
//     const borderWidth = 2
//     canvasElement.current!.height = height - borderWidth
//     canvasElement.current!.width = innerWidth - borderWidth
//
//     setBackgroundImage(base64)
//   }
// }
// const onDeleteData = async () => {
//   const data = localStorage.getItem(STORAGE_KEY)
//   const bgImage = localStorage.getItem(STORAGE_BG_IMAGE_KEY)
//   if (!data && !bgImage) {
//     message.warning('現在ブラウザに保存されたデータはありません。クリアする必要はありません')
//   } else {
//     localStorage.removeItem(STORAGE_KEY)
//     localStorage.removeItem(STORAGE_BG_IMAGE_KEY)
//     message.success('クリアしました')
//   }
// }
// 设置宽高
// const { width, height } = innerElement.current!.getBoundingClientRect()
// const canvasWidth = width - 2
// const canvasHeight = height - 2
// canvasElement.current!.width = canvasWidth
// canvasElement.current!.height = canvasHeight
// canvasElement.current!.style.width = canvasWidth + 'px'
// canvasElement.current!.style.height = canvasHeight + 'px'
{/*<Popconfirm*/}
{/*  title="ブラウザに保存されたデータをクリア"*/}
{/*  description="ブラウザに保存されたデータをクリアしてもよろしいですか？この操作を実行すると元に戻せなくなります。"*/}
{/*  placement="bottomLeft"*/}
{/*  okText="確定"*/}
{/*  cancelText="キャンセル"*/}
{/*  icon={<DeleteOutlined style={{ color: '#ff4d4f' }} />}*/}
{/*  onConfirm={onDeleteData}*/}
{/*>*/}
{/*  <Button icon={<DeleteOutlined />} type="primary" ghost danger>*/}
{/*    キャッシュクリア*/}
{/*  </Button>*/}
{/*</Popconfirm>*/}